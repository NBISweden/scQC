---
title: "Ambient RNA removal"
author: Åsa Björklund
format:
  revealjs:
    df-print: kable
    scrollable: true
    smaller: true
    css: assets/css/slides.scss
execute:
  echo: false
  cache: true

bibliography: references.bib
---


## Background

* RNA may be released from broken cells and float around in the "Soup".
* Can create large batch effects
* Info on ambient profile used for calling cells.

![](assets/ambient_rna.jpeg){.nostretch fig-align="center" width="800px"}
[@heumos2023best-practices]{.small}


## Methods for ambient estimation

* EmptyDrops (OBS! no correction) - R based, uses empty droplets signal to define true cells.
* SoupX - R based, depends on clustering of the cells. 
* DecontX - R based, depends on clustering of the cells. 
* Cellbender - python based, uses empty droplets. Faster with GPU.


## Emptydrops {.nostretch}

* Cell calling by significant deviations from the expression profile of the ambient solution.

![](assets/emptydrops_fig2.jpeg){.nostretch fig-align="center" width="450px"}
[@lun2019emptydrops]{.small}

## SoupX

![](assets/soupx_fig1.jpeg){.nostretch fig-align="center" height="550px"}
[@young2020soupx]{.small}

## DecontX

![](assets/decontx_fig1.jpeg){.nostretch fig-align="center" height="550px"}
[@yang2020decontx]{.small}

## DecontX

![](assets/decontx_fig4.jpeg){.nostretch fig-align="center" height="550px"}
[@yang2020decontx]{.small}

## Cellbender

![](assets/cellbender_fig1.jpeg){.nostretch fig-align="center" height="550px"}
[@fleming2023cellbender]{.small}

## Evaluation paper 
![](assets/janssen_2023_title.png)
[@janssen2023ambient]{.small}

## Evaluation paper 
![](assets/janssen_2023_fig1.jpeg){.nostretch fig-align="center" height="550px"}
[@janssen2023ambient]{.small}

## Evaluation paper 
![](assets/janssen_2023_fig2.jpeg)
[@janssen2023ambient]{.small}

## Evaluation paper
![](assets/janssen_2023_fig5.jpeg){.nostretch fig-align="center" height="550px"}
[@janssen2023ambient]{.small}

## Evaluation paper 
![](assets/janssen_2023_fig6.jpeg){.nostretch fig-align="center" height="550px"}
[@janssen2023ambient]{.small}


## Mouse Samples

Mouse samples from GEO with raw cellranger matrices:

* GSE218853 - Janssen paper, mixed strain kidney samples, sc/sn, 5 samples: rep1, rep2, rep3, nuc1, nuc2 
* GSE213825 - root ganglia scRNAseq, 16 samples, Names SAM24349928-SAM24374041
* GSE261852 - mouse CAR-T cells, scRNAseq, 2 samples, spl1, spl2



## Setup {visibility="hidden"}

```{python}
#| label: yaml-load
import yaml
import os
import glob
from IPython.display import display, Markdown

with open('./settings.yml', 'r') as f:
    settings = yaml.load(f, Loader=yaml.SafeLoader)

samples = settings['samples'].keys()

mouse_report = "../analysis/ambient_methods_overview_wED_files/figure-html/"
hsa_report = "../analysis/ambient_methods_overview_hsa_files/figure-html/"
hsa_parse_report = "../analysis/ambient_methods_overview_hsa_parse_files/figure-html/"

```

```{python}
def sortorder(l):
    L = [ (l[i],i) for i in range(len(l)) ]
    L.sort()
    sorted_l,permutation = zip(*L)
    return permutation
```


## Annotation

First, read in the annotation file for biotypes.

Make broader groupings:

* Mito genes - both PC and nc.
* PC genes - includes also IG/TR genes
* lncRNA
* other - all other categories / unassigned




## Methods 

* Cell calling:
    * Cellbender  (CB)
    * EmptyDrops (OBS! no correction) - suggested cutoff at 0.05 (ED)
    * Cellranger inflection point if available (CR)
* Ambient Removal:
    * SoupX - run at 2 different clustering resolutions 0.2 and 0.8 (SX02, SX08)
    * DecontX (DX)
    * Cellbender (CB)

For downstream analysis, use the called cells from Cellbender.

## Barcode rank plots

::: {style="font-size: 50%;"}
::: {.panel-tabset}

```{python}
#| output: asis

bfiles = glob.glob(mouse_report + "barcode*")
idx = [int(file.replace(".",'-').split('-')[6]) for file in bfiles]
fileorder = sortorder(idx)
 
for i,sname in enumerate(settings['samples'].keys()):
    display(Markdown(f"### {sname}"))    
    display(Markdown(f" "))
    display(Markdown(f'![](' +bfiles[fileorder[i]]+'){.nostretch fig-align="center" height="550px"}' ))
    display(Markdown(f" "))


```

:::
:::


## Filtering stats all methods

Proportion filtered per cell and method


```{python}
plotfile = os.path.join(mouse_report, "filt-stat-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```

## Gene stats


Plot fraction filtered per gene vs total counts before filtering. Color genes by:

::: {style="font-size: 50%;"}

* green = mt
* red = pc
* blue = lincRNA
* purple = other (all other classes, plus ones not in latest biomart ensembl version)

::: {.panel-tabset}

```{python}
#| output: asis
#| 


files = glob.glob(mouse_report + "plot-genes*")
files.sort()
for i,sname in enumerate(settings['samples'].keys()):
    display(Markdown(f"### {sname}"))    
    display(Markdown(f" "))
    display(Markdown(f'![](' +files[i]+'){.nostretch fig-align="center" height="350px"}' ))
    display(Markdown(f" "))


```

:::
:::



## QC stats

Violin plots after filtering and raw. 

Generally more high mito cells after CB filtering. 


```{python}
plotfile = os.path.join(mouse_report, "plot-vln-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```


## Biotype proportions


::: {style="font-size: 50%;"}

* "Total" is the full raw matrix also containing empty droplets. 
* "Raw" is the subset of cells selected by cellbender before removing ambient.
* All other contain the same set of cells as "Raw" but after ambient removal.

:::

```{python}
plotfile = os.path.join(mouse_report, "plot-biotype-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```


## Conclusion

* Often seem to be top expressed genes that are also top ambient genes.


## Human data

![](assets/gezelius_title.png)

* Treated human cell lines with 5 drugs and Ctrl.
* 2 Parse runs with all 6 samples
* 1 10X multi run with all 6 samples
* 2 10X fixed protocol with 3 samples on each.

[@gezelius2024parsecomp]{.small}

## Barcode rank plot

::: {style="font-size: 50%;"}
::: {.panel-tabset}

```{python}
#| output: asis

with open('../analysis/settings_hsa_small.yml', 'r') as f:
    settings = yaml.load(f, Loader=yaml.SafeLoader)

samplesH = settings['samples'].keys()


bfiles = glob.glob(hsa_report + "barcode*")
idx = [int(file.replace(".",'-').split('-')[6]) for file in bfiles]
fileorder = sortorder(idx)
 
for i,sname in enumerate(samplesH):
    display(Markdown(f"### {sname}"))    
    display(Markdown(f" "))
    display(Markdown(f'![](' +bfiles[fileorder[i]]+'){.nostretch fig-align="center" height="550px"}' ))
    display(Markdown(f" "))


```

:::
:::



## Gene stats


Plot fraction filtered per gene vs total counts before filtering. Color genes by:

::: {style="font-size: 50%;"}

* green = mt
* red = pc
* blue = lincRNA
* purple = other (all other classes, plus ones not in latest biomart ensembl version)

::: {.panel-tabset}

```{python}
#| output: asis
#| 


files = glob.glob(hsa_report + "plot-genes*")
files.sort()
for i,sname in enumerate(settings['samples'].keys()):
    display(Markdown(f"### {sname}"))    
    display(Markdown(f" "))
    display(Markdown(f'![](' +files[i]+'){.nostretch fig-align="center" height="350px"}' ))
    display(Markdown(f" "))


```

:::
:::

## Biotype proportions


::: {style="font-size: 50%;"}

* "Total" is the full raw matrix also containing empty droplets. 
* "Raw" is the subset of cells selected by cellbender before removing ambient.
* All other contain the same set of cells as "Raw" but after ambient removal.

:::

```{python}
plotfile = os.path.join(hsa_report, "plot-biotype-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```

## Parse background and cell calling

![](assets/parse-evercode.png)

* Unclear from documentation if barcode ranks should be done by plate, sample or well. 
* Probably too few cells for running per well.
* Parse pipeline only stores barcodes with >= 10 reads. 

## Parse cell calls

```{python}
plotfile = os.path.join(hsa_parse_report, "parse-filtering-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```

## Parse barcode rank plot

::: {style="font-size: 50%;"}
::: {.panel-tabset}

```{python}
#| output: asis

with open('../analysis/settings_hsa_parse.yml', 'r') as f:
    settings = yaml.load(f, Loader=yaml.SafeLoader)

samplesH = settings['samples'].keys()


bfiles = glob.glob(hsa_parse_report + "barcode*")
idx = [int(file.replace(".",'-').split('-')[6]) for file in bfiles]
fileorder = sortorder(idx)
 
for i,sname in enumerate(samplesH):
    display(Markdown(f"### {sname}"))    
    display(Markdown(f" "))
    display(Markdown(f'![](' +bfiles[fileorder[i]]+'){.nostretch fig-align="center" height="550px"}' ))
    display(Markdown(f" "))


```

:::
:::



## Parse ambient profiles

```{python}
plotfile = os.path.join(hsa_parse_report, "ambient-overlap2-output-1.png")
display(Markdown(f'![](' +plotfile+'){.nostretch fig-align="center" height="550px"}' ))
```



## Discussion

* Correct or not correct? 

* What should we recommend?

* How to make a decisison? 

* Clear that we also have ambient signal is both Visium and Xenium, how to deal with?

## References {.smaller}




